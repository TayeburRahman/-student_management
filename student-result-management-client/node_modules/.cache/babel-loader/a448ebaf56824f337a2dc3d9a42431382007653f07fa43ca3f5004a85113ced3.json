{"ast":null,"code":"import { apiSlice } from \"../apiSlice\";\nexport const authApi = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    loginUser: builder.mutation({\n      query: data => ({\n        url: '/api/v1/admin/login',\n        method: 'POST',\n        body: data\n      })\n    }),\n    registration: builder.mutation({\n      query: data => ({\n        url: '/api/v1/admin/signup',\n        method: 'POST',\n        body: data\n      })\n    })\n  })\n});\n\n// createApi({\n//     reducerPath: 'authApi',\n//     baseQuery: fetchBaseQuery({\n//         baseUrl:'http://localhost:6060',\n\n//     }),\n//     endpoints: (builder) => ({\n//         loginUser: builder.mutation({\n//             query: (data) => ({\n//                 url: '/api/v1/admin/login',\n//                 method: 'POST',\n//                 body: data, \n//             }),\n//         }),\n\n//         registration: builder.mutation({\n//             query: (data) => ({\n//                 url: '/api/v1/admin/signup',\n//                 method: 'POST',\n//                 body: data, \n//             }),\n\n// async onQueryStarted(query, { queryFulfilled, dispatch }) {\n//     try {\n//         const { data: user } = await queryFulfilled;\n\n//         dispatch(setUser({ user }));\n\n//         dispatch(\n//             addMessage({\n//                 message: 'Registration successful',\n//                 type: 'success',\n//             })\n//         );\n//     } catch (error) {\n//         dispatch(\n//             addMessage({\n//                 message:\n//                     error?.error?.data?.message ||\n//                     error.message ||\n//                     'Registration failed',\n//                 type: 'error',\n//             })\n//         );\n//     }\n// },\n\n// transformResponse(baseQueryReturnValue, meta, arg) {\n//     return baseQueryReturnValue.user;\n// },\n//     }),\n\n// })\n\n// })\n\nexport const {\n  useLoginUserMutation,\n  useRegistrationMutation\n} = authSlice;","map":{"version":3,"names":["apiSlice","authApi","injectEndpoints","endpoints","builder","loginUser","mutation","query","data","url","method","body","registration","useLoginUserMutation","useRegistrationMutation","authSlice"],"sources":["/media/tayebur/D40421030420E9E6/project/node&React/student-result-management/student-result-management-client/src/features/auth/authSlice.js"],"sourcesContent":["import { apiSlice } from \"../apiSlice\";\n\nexport const authApi = apiSlice.injectEndpoints({\n\n    endpoints: (builder) => ({\n                loginUser: builder.mutation({\n                    query: (data) => ({\n                        url: '/api/v1/admin/login',\n                        method: 'POST',\n                        body: data, \n                    }),\n                }),\n\n                registration: builder.mutation({\n                     query: (data) => ({\n                         url: '/api/v1/admin/signup',\n                         method: 'POST',\n                         body: data, \n                     }),\n                 }),\n         })\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n// createApi({\n//     reducerPath: 'authApi',\n//     baseQuery: fetchBaseQuery({\n//         baseUrl:'http://localhost:6060',\n\n//     }),\n//     endpoints: (builder) => ({\n//         loginUser: builder.mutation({\n//             query: (data) => ({\n//                 url: '/api/v1/admin/login',\n//                 method: 'POST',\n//                 body: data, \n//             }),\n//         }),\n\n//         registration: builder.mutation({\n//             query: (data) => ({\n//                 url: '/api/v1/admin/signup',\n//                 method: 'POST',\n//                 body: data, \n//             }),\n\n            // async onQueryStarted(query, { queryFulfilled, dispatch }) {\n            //     try {\n            //         const { data: user } = await queryFulfilled;\n\n            //         dispatch(setUser({ user }));\n\n            //         dispatch(\n            //             addMessage({\n            //                 message: 'Registration successful',\n            //                 type: 'success',\n            //             })\n            //         );\n            //     } catch (error) {\n            //         dispatch(\n            //             addMessage({\n            //                 message:\n            //                     error?.error?.data?.message ||\n            //                     error.message ||\n            //                     'Registration failed',\n            //                 type: 'error',\n            //             })\n            //         );\n            //     }\n            // },\n\n            // transformResponse(baseQueryReturnValue, meta, arg) {\n            //     return baseQueryReturnValue.user;\n            // },\n    //     }),\n\n\n    // })\n        \n// })\n\nexport const {useLoginUserMutation, useRegistrationMutation} = authSlice;"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,aAAa;AAEtC,OAAO,MAAMC,OAAO,GAAGD,QAAQ,CAACE,eAAe,CAAC;EAE5CC,SAAS,EAAGC,OAAO,KAAM;IACbC,SAAS,EAAED,OAAO,CAACE,QAAQ,CAAC;MACxBC,KAAK,EAAGC,IAAI,KAAM;QACdC,GAAG,EAAE,qBAAqB;QAC1BC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACV,CAAC;IACL,CAAC,CAAC;IAEFI,YAAY,EAAER,OAAO,CAACE,QAAQ,CAAC;MAC1BC,KAAK,EAAGC,IAAI,KAAM;QACdC,GAAG,EAAE,sBAAsB;QAC3BC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACV,CAAC;IACL,CAAC;EACT,CAAC;AAEV,CAAC,CAAC;;AAaF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEY;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACR;;AAGA;;AAEJ;;AAEA,OAAO,MAAM;EAACK,oBAAoB;EAAEC;AAAuB,CAAC,GAAGC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}